# NOTE: update this with your service name
service: notes-app-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1

  #These environment variables are made available to our functions
  #under process.env,so in this case we access DynamoDb's tableName.
  environment:
    tableName: notes
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}

  #'iamRoleStatements' defines the permission policy for the lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main
  # function in create.js
  # - path: url path is /notes
  # - method: POST request retrieves a request in the body
  # - cors: enabled CORS (Cross-Origin Resource
  # domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  get:
      handler: get.main
      events:
        - http:
            path: notes/{id}
            method: get
            cors: true
            authorizor: aws_iam
  list:
      handler: list.main
      events:
        - http:
            path: notes
            method: get
            cors: true
            authorizor: aws_iam
  update:
      handler: update.main
      events:
        - http:
            path: notes/{id}
            method: put
            cors: true
            authorizor: aws_iam
  delete:
      handler: delete.main
      events:
        - http:
            path: notes/{id}
            method: delete
            cors: true
            authorizor: aws_iam
  billing:
      handler: billing.main
      events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam
resources:
  - ${file(resources/api-gateway-errors.yml)}
